meta::data('default-action', 'shell');
meta::data('license', <<'__3c6177256de0fddb721f534c3ad8c0ee');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__3c6177256de0fddb721f534c3ad8c0ee

meta::data('name', 'literate-project');
meta::data('output-dir', '/tmp');
meta::data('pdf-output-file', '/tmp/literate-project.3d25d18aa19d37f890ec00c55eaecabc/document.pdf');
meta::data('pdf-reader', '/usr/bin/evince');
meta::data('pdftex-command', 'pdflatex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('quiet', '1');
meta::data('source-directory', '/tmp/src');
meta::data('table-of-contents', '1');
meta::data('tex-command', 'latex -output-directory=__TEMPORARY_DIRECTORY__ __INPUT_FILE__');
meta::data('watching', '0');
meta::function('clean', <<'__1269c1a312062a1598dcde16eb6134e2');
my $output_directory = &{'pdf-output-file'}();
$output_directory =~ s+/.*++g;
unlink <$output_directory/*>;
rmdir $output_directory;
__1269c1a312062a1598dcde16eb6134e2

meta::function('compile', <<'__8de64ff7f4823d92f3258e211608d9bb');
my $tex_command         = &{'tex-command'}();
my $pdftex_command      = &{'pdftex-command'}();
my $filename            = 'document';

my $contents            = tex();
my $output_directory    = &{'output-dir'}();
chomp $output_directory;

my $temporary_directory = state_based_filename();
$temporary_directory =~ s+^.*/++;
$temporary_directory = "$output_directory/$temporary_directory";

$tex_command    =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$tex_command    =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

$pdftex_command =~ s/__TEMPORARY_DIRECTORY__/$temporary_directory/g;
$pdftex_command =~ s+__INPUT_FILE__+$temporary_directory/$filename.tex+g;

mkdir $temporary_directory;
file::write("$temporary_directory/$filename.tex", $contents);

my $result = &{'table-of-contents'}() ? system($tex_command) || system($tex_command) || system($pdftex_command) : system($pdftex_command);

associate('data::pdf-output-file', "$temporary_directory/$filename.pdf", execute => 1);
$result;
__8de64ff7f4823d92f3258e211608d9bb

meta::function('exists', <<'__3c6aa32026f04564ec4861c77a8e6465');
my $name = shift;
grep {$_ eq $name} keys %data;
__3c6aa32026f04564ec4861c77a8e6465

meta::function('make', <<'__9a3d7e3c7e0017f4c9b239f3858aaf03');
compile() || view();
clean();
__9a3d7e3c7e0017f4c9b239f3858aaf03

meta::function('pop-state', <<'__90a6d3599a269ca0bef8126df7aba8e0');
%data = %{pop @{$transient{'states'}}} if @{$transient{'states'}};
reload();
__90a6d3599a269ca0bef8126df7aba8e0

meta::function('push-state', <<'__ba601ddf7dce874ce79dd37a936ffdcc');
push @{$transient{'states'} = $transient{'states'} || []}, {%data};
my $state_count = scalar @{$transient{'states'}};
"There are now $state_count states on the stack.";
__ba601ddf7dce874ce79dd37a936ffdcc

meta::function('render', <<'__ccb26db43115329651cc3c0527a3e849');
use File::Copy 'copy';
compile();
copy(&{'pdf-output-file'}(), &{'source-directory'}() . '/' . name() . '.pdf') or die "Copy failed: $!";
__ccb26db43115329651cc3c0527a3e849

meta::function('s2', <<'__d85e074ced16d8011a290908fbfe3f7c');
my ($options, @criteria)                              = separate_options(@_);
my ($inheritable, $partial, $unique, $meta, $nonmeta) = @$options{qw(-i -p -u -m -M)};

$partial ||= @criteria || $unique || $meta || $nonmeta;

my %inherited = map {strip($_) => 1} split(/\n/, join("\n", retrieve(grep /^parent::/, keys %data)));

my $criteria               = join '|', @criteria;
my @matching_keys          = grep length && (! $criteria    || m/$criteria/) &&
                                            (! $inheritable || $transient{inherit}{namespace($_)}) &&
                                            (! $unique      || ! $inherited{$_}) &&
                                            (! $meta        || /^meta::/o) &&
                                            (! $nonmeta     || ! /^meta::/o), sort keys %data;

my @matching_attributes    = map serialize_single($_), grep(/^meta::/o,   @matching_keys),
                                                       grep(! /^meta::/o, @matching_keys);

my @final_array            = @{$partial ? \@matching_attributes : [retrieve('bootstrap::initialization'), @matching_attributes, 'main();', '', '__END__']};

terminal::message('info', "No attributes matched $criteria") unless @final_array;
join "\n", @final_array;

__d85e074ced16d8011a290908fbfe3f7c

meta::function('tex', <<'__5bb8bf491e1b442858096acf711135f9');
my ($document) = @_;
$document ||= 'main';
preprocess(retrieve("section::$document"));
__5bb8bf491e1b442858096acf711135f9

meta::function('view', <<'__72064117780244bd9dd38659573b9f2c');
my $pdf_reader      = &{'pdf-reader'}();
my $pdf_output_file = &{'pdf-output-file'}();
chomp $pdf_reader;
system("$pdf_reader '$pdf_output_file'");
__72064117780244bd9dd38659573b9f2c

meta::internal_function('messages::error', <<'__5af9120535afe26fa6828f477abe833c');
my ($message) = @_;
terminal::message('error', $message);
die;
__5af9120535afe26fa6828f477abe833c

meta::internal_function('strip', 'wantarray ? map {s/^\s*|\s*$//g; $_} @_ : $_[0] =~ /^\s*(.*?)\s*$/ && $1;');

meta::resource('header', <<'__efe6254be4f73fb4170ab1980a1888d5');
- include resource::header-packages
- include resource::header-listings

- include resource::header-refs

- include resource::header-languages
- include resource::header-resource
__efe6254be4f73fb4170ab1980a1888d5

meta::resource('header-languages', <<'__637a18cf607b727dec3feab552be05e2');
\lstnewenvironment{asmcode}       {}{}
\lstnewenvironment{cppcode}       {\lstset{language=c++}}{}
\lstnewenvironment{javacode}      {\lstset{language=java}}{}
\lstnewenvironment{javascriptcode}{}{}
\lstnewenvironment{htmlcode}      {\lstset{language=html}}{}
__637a18cf607b727dec3feab552be05e2

meta::resource('header-listings', <<'__4caf6ff3ff152cce49ad5d1775ad0703');
\definecolor{gray}{rgb}{0.6,0.6,0.6}

\usepackage{caption}
\DeclareCaptionFormat{listing}{\llap{\color{gray}#1\hspace{10pt}}\tt{}#3}
\captionsetup[lstlisting]{format=listing, singlelinecheck=false, margin=0pt, font={bf}}

\lstset{columns=fixed,basicstyle={\tt},numbers=left,firstnumber=auto,basewidth=0.5em,showstringspaces=false,numberstyle={\color{gray}\scriptsize}}
__4caf6ff3ff152cce49ad5d1775ad0703

meta::resource('header-packages', <<'__f69baadb1d3ce11744003b174c91b34b');
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,pxfonts,listings,color}
\usepackage[colorlinks]{hyperref}
__f69baadb1d3ce11744003b174c91b34b

meta::resource('header-refs', '\newcommand{\Ref}[2]{\hyperref[#2]{#1 \ref*{#2}}}');
meta::resource('header-resource', '\lstnewenvironment{resourcecode}{}{}');
meta::section('introduction', <<'__da922cd923eedb4306efb6920b9ebc91');
- s1 Introduction | sec:introduction
  This Perl object gives you a way to integrate documentation, code, and tests into one linearized format. \Ref{Section}{sec:introduction-code} goes over this in more detail.

  Here are some features:

  - itemize << end
    - item Impossible to use
    - item Unfathomably complex to maintain
  - end

  And the costs associated with using this technology are:

  - enumerate << end
    - item Developers must know self-modifying Perl.
           This is very rare!
    - item If something breaks, you are sunk.
  - end

  - s2 Code | sec:introduction-code
    Code is entered in literate form. For example:

  - resource build << end
    #!/bin/bash
    g++ hello.cc -o hello
    javac Hello.java
  - end

  - cpp hello.cc << end
    #include <iostream>
    int main () {
      std::cout << "Hello world" << std::endl;
      return 0;
    }
  - end

  - java Hello.java << end
    public class Hello {
      public static void main (final String[] args) {
        System.out.println ("Hello world");
      }
    }
  - end

  - javascript hello.js << end
    document.getElementById ('hi').appendChild (
      document.createTextNode ('Hi there!'));
  - end

  - html hello.html << end
    <html>
      <body>
        <div id='hi'></div>
        <script src='hello.js'></script>
      </body>
    </html>
  - end

  - asm false.s << end
    main:
      mov $1, %eax
      ret
  - end

  - resource >> build << end
    g++ false.s -o false
  - end
__da922cd923eedb4306efb6920b9ebc91

meta::section('main', <<'__589811f7266bdf4ec8b030aeb648dddc');
- documentclass article
- include resource::header

- title  Literate Project
- author Spencer Tipping

- document << end
  - maketitle
  - tableofcontents

  - comment This is a line comment that will not appear in the TeX source.
  - comment Block comment syntax is shown below:

  - comment << end
    This text will not appear in the TeX source either.

    - comment << end
      Nor will this text, and comments are nestable as long as either the
      EOF markers or indentation levels differ.
    - end

  - comment << eof
    Same indentation level, different EOF marker.
  - eof
  - end
  
  - include section::introduction
- end
__589811f7266bdf4ec8b030aeb648dddc

meta::vim_highlighter('cltex', <<'__5bfc80e1a2ad3bb7cb4f57ff906d71b0');
" Cleaner TeX
" Maintainer: Spencer Tipping <spencer@spencertipping.com>
" Language:   Cleaner TeX (a variant of LaTeX with support for a bunch of embedded languages)

if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

syn match   cltEofMarker   /<<\s*\w\+/ contained
syn region  cltLineComment matchgroup=cltCode start=/^\s*- comment / end=/$/ contained
syn match   cltLine        /^\s*- .*$/ contains=cltEofMarker,cltLineComment

syn include @cpp           syntax/cpp.vim        | unlet b:current_syntax
syn include @java          syntax/java.vim       | unlet b:current_syntax
syn include @asm           syntax/asm.vim        | unlet b:current_syntax
syn include @javascript    syntax/javascript.vim | unlet b:current_syntax
syn include @html          syntax/html.vim       | unlet b:current_syntax

syn region  cltCpp         matchgroup=cltCode start=/^\z(\s*\)- cpp .*<<\s*\z(\w\+\)$/        end=/^\z1- \z2$/ contains=@cpp
syn region  cltJava        matchgroup=cltCode start=/^\z(\s*\)- java .*<<\s*\z(\w\+\)$/       end=/^\z1- \z2$/ contains=@java
syn region  cltAsm         matchgroup=cltCode start=/^\z(\s*\)- asm .*<<\s*\z(\w\+\)$/        end=/^\z1- \z2$/ contains=@asm
syn region  cltJavascript  matchgroup=cltCode start=/^\z(\s*\)- javascript .*<<\s*\z(\w\+\)$/ end=/^\z1- \z2$/ contains=@javascript
syn region  cltHtml        matchgroup=cltCode start=/^\z(\s*\)- html .*<<\s*\z(\w\+\)$/       end=/^\z1- \z2$/ contains=@html
syn region  cltResource    matchgroup=cltCode start=/^\z(\s*\)- resource .*<<\s*\z(\w\+\)$/   end=/^\z1- \z2$/
syn region  cltComment     matchgroup=cltCode start=/^\z(\s*\)- comment .*<<\s*\z(\w\+\)$/    end=/^\z1- \z2$/

syn cluster cltStuff       add=cltCpp,cltJava,cltAsm,cltJavascript,cltHtml,cltResource,cltComment,cltLine

syn region  cltDocument    start=/\%^/ end=/\%$/ contains=@cltStuff

hi link cltLine            Special
hi link cltKeyword         String
hi link cltResource        String
hi link cltEofMarker       String

hi link cltCode            Special
hi link cltDocument        Comment
hi link cltComment         Type
hi link cltLineComment     Type

let b:current_syntax = "cltex"
__5bfc80e1a2ad3bb7cb4f57ff906d71b0
